				  Props Pattern
..............................................................................................

In Component driven architecture (Angular,React,Vue), follows some principles

Parent Component and Child Component:
....................................

The Parent component is responsible for retriving data from the service layer
The child component is reponsible for displaying data 

We can pass data upto n of childrens
Which is called "uni directional data flow model"
Components can be communicated via props binding.

How to pass data from the parent to child?

[] - property notation

<element [propertyName]="PropertyValue">

PropertyValue can be primitives(string,numbers,boolean),object,array

<app-address [address]="user.address" ></app-address>

How child component receive property?

@Input()
.............................................................................................

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { UsermasterComponent } from './usermaster.component';
import { SharedModule } from '../shared/shared.module';
import { AddressComponent } from './address.component';
import { CompanyComponent } from './company.component';
import { UsersListComponent } from './users-list.component';

@NgModule({
  declarations: [
    UsermasterComponent,
    AddressComponent,
    CompanyComponent,
    UsersListComponent
  ],
  imports: [
    CommonModule, SharedModule
  ],
  exports: [
    UsermasterComponent,
    AddressComponent,
    CompanyComponent,
    UsersListComponent
  ]
})
export class UsersModule { }
..................

UserMaster:
<div>
    <h1>User Master Details</h1>
    <div *ngFor="let user of users | async">
        <app-users-list [user]="user"></app-users-list>
    </div>
</div>
import { Component, OnInit } from '@angular/core';
import { Observable } from 'rxjs';
import { UserService } from './user.service';

@Component({
  selector: 'app-usermaster',
  templateUrl: './usermaster.component.html',
  styles: [
  ]
})
export class UsermasterComponent implements OnInit {

  users!: Observable<any>
  constructor(private userService: UserService) { }

  ngOnInit(): void {
    this.users = this.userService.findAll()
  }

}

UserList:
<h3>Id {{user.id}} </h3>
<p>Name {{user.name}} </p>
<p>UserName {{user.username}} </p>
<p>email{{user.email}} </p>
<!-- <address>
            {{user.address.city}} {{user.address.zipcode}}
        </address> -->
<app-address [address]="user.address"></app-address>
<!-- <h3>Company</h3>
        <p>Company Name {{user.company.name}}</p> -->
<app-company [company]="user.company"></app-company>


import { Component, Input, OnInit } from '@angular/core';

@Component({
  selector: 'app-users-list',
  templateUrl: './users-list.component.html',
  styles: [
  ]
})
export class UsersListComponent implements OnInit {

  @Input()
  user:any
  constructor() { }

  ngOnInit(): void {
  }

}

Address and Company:
import { Component, Input, OnInit } from '@angular/core';

@Component({
  selector: 'app-address',
  templateUrl: './address.component.html',
  styles: [
  ]
})
export class AddressComponent implements OnInit {

  @Input()
  address!: any
  constructor() { }

  ngOnInit(): void {
    console.log(this.address)
  }

}
<address>
    City {{address.city}}
</address>
...
import { Component, Input, OnInit } from '@angular/core';

@Component({
  selector: 'app-company',
  templateUrl: './company.component.html',
  styles: [
  ]
})
export class CompanyComponent implements OnInit {

  @Input()
  company:any 
  constructor() { }

  ngOnInit(): void {
  }

}
<h3>Company</h3>
<p>Company Name {{company.name}}</p>

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class UserService {

  constructor(private http: HttpClient) { }

  //get Users
  public findAll(): Observable<any[]> {
    const url = 'https://jsonplaceholder.typicode.com/users';
    return this.http.get<any[]>(url)
  }
}
..............................................................................................
			   Attribute Binding
..........................................................................................

Any html element which has attribute

<img src="log.png" />
      |
attribute

Two types of attribute binding

1.static attribute
   attribute values are hardcoded, cant be changed once view is rendered
 <img src="log.png" />
 <div hidden>
 <div enabled>
2.dynamic attribute
   attribute values are dynamic, can be changed once view is rendered.

 <img [src]="variable" />


<div class="container">
  <h1>Users App-Property Pattern-Uni Directional Data Flow</h1>
  <hr>
  <!-- <app-usermaster></app-usermaster> -->
  <hr>
  <h1>Attribute Binding</h1>
  <img src="favicon.ico"/>
  <img [src]="logo"/>
  <div [hidden]="show">Hide Me</div>
</div>

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'ng-props';
  logo: string = "favicon.ico"
  show:boolean = false
}
...........................................................................................
				   Class and Style Binding
...........................................................................................

Dynamically if you want to change css

  <h1>CSS binding</h1>
  <div style="color:red">Static style Attribute </div>
  <div class="intro">Static css Attribute </div>
  <div [class.highlight]="showHighlight">Enable</div>
</div>
.............................................................................................

[] notation is used

1.to send data from parent component to child component
2.to supply dynamic html attribute values
3.to apply dynamic css to an html element


























