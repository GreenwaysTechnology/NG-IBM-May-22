Software setup:

1.Node js 14+ - 16
2.VS Code
.............................................................................................
				  Angular


Pre Knowledge:

1.HTML 5 
2.CSS 3
3.JavaScript - ES 5 ,ES 6

...
Angular Tech Stack:
...................

1.Typescript
2.Reactive Programming using Rxjs
3.Angular
..............................................................................................
				 Typescript
..............................................................................................

What is typescript?

 Typescript is object oriented and functional style programming language.
 Typescript that scales javascript.
 scaling is nothing but expanding features.
 Typescript is super set of Javascript.
 Typescript is programming language to write javascript apps.


Why Typescript?


What is Javascript?

 -Javascript is programming language.

Styles of programming language
 -Object oriented
 -Procedure oriented
 -Functional oriented
 -Event driven

Some languages designed with single style - c++,java,C#,c
Some languages designed with multiple styles (hybrid) - Javascript,java 8,C#,Scala,Groovy,Kotiln....

"Javascript is Object based,functional Style,Event driven programming language."

Object oriented and Object based:
.................................

Object Oriented Principles:
...........................

1.Abstraction
2.Encapsulation
3.Hierarchy
4.Typing
5.Modularity
----------------------
6.Concurrency
7.Persistency

if any language follows the first 5 prinicples 100% , those languages are called object
oriented programming.

java script does not follow the first 5 principles , so it is called as object based languge.


functional pure vs style:

-if any language follows 100% functional programming principles those languages are called
"purely functional",if not functional style.

...............................................................................................
.............................................................................................
					Typing
				     (Data Types)
.............................................................................................
				

classification of data types:

1.Strongly typed /Static Typed

 The type of variable is verified during compile time.
 int a =100;
 a=true;
  This is compile time error.

 eg:
  c,C++,Java,C#....

2.Weakly typed/ Dynamic Typed

 Dynamic typed language / weak typed language -----Javascript
        The type of variable is not verified during compile time, runtime verfication.

 variable=value
 var i=10;
 i=true
 i="hello"

.............................................................................................

JavaScript is not object oriented
Javascript  is not strongly typed 

.............................................................................................

		Think: why js was designed to be dynamic typed?
.............................................................................................
Drawbacks of dynamic typing:
    -We cant build enterprise consistent application.

 -Object based 
    if we  want to design , object oriented system in js not possible.

Why javascript:
  Javascript was created for process html pages.

1989 - Web Project was started   

1990 -  The first webserver,Browser was created

1994 - Netscap started

1995 - The first netscap navigator came to access web pages 

1996 - Netscap decided to put java inside web browser.

static web page- before netscap
dynamic web page -netscap

----Static web----- only hand coded html pages.

1996 - CREATED Dynamic web : how to work with databases
     - CGI - C,perl.
 J2EE- Servlets,JSP
 MS  - ASP
 OPEN SOURCE - PHP.

Netscap decided to build client side web technoloy- once html is rendered into web browser
how to change that html onfly. 

Netscap decided to create a new programming language, who recurited Brendan Eich
,the programmer , asked to create new programming language for netscap navigator.

-Objective of Project

-It should be like java but it should not be java -light weight - scripting
-deadline is 10 days.

Time line:

1.javascript project started 1995
1.first name of the language was "Mocha"
2.language was renamed to "Live Script" -1996
3.language was renamed to "java Script" -1996

............................................................................................
				 ECMA
...................................................................................

Ecma International is an industry association dedicated to the standardization of information
and communication systems.

After language ready, which was submitted to standard body "ECMA international"

1996---1997 : JS 1.0 =>ES 1.0

1997- 1998 :  ES 2.0: It did not come

1999 :  ES 3

2007 : ES 4

2008 : ES 5
.....

2012-2015 : ES 6
........
2016  ONWARDS : es 7,es 8, ............
.............................................................................................
				..............................................................................................
			2008 - Introduction of  Node.js : Enter prise Javascript
..............................................................................................
in order to build enterprise javascript apps, community started thinking about "Object oriented Models".
                      How to introduce object oriented features into language.
..............................................................................................
Fundamentally js is object based,type less language, then it is difficult to build object oriented systems.

in order to create better javascript, 2009, The project was started to make javascript looks like other object oriented langugages.
 
 - classes,interfaces,modules.... : Coffee script (intension was to introduce object oriented features like classes,interfaces).


YOu write code in coffeescript

Employee.coffee

class Employee {

}
compiler - coffee Employee.coffee
|
Employee.js - compiled code -pure javascript 
|
run on browser


Coffee script had issues still - Type system- No strongly typed.


2010, Microsoft started project to create "object oriented javascript" using C#

Objective of MS Project:

 -Add Type System - Strong Typing
 -Classes
 -Modules
 -interfaces
 -encapulation keywords
 .......
C# ---compiler------plain javascript.

MS Failed to port this project to public because

Problems with C#
 1.PORTABLITY.
 2.COMPLEXITY
..............................................................................................

2012 - ECMA released new javascript spec (ES 6) in which They introduced
  
   - classes
   - let 
   - const
   - advanced object literals
   - Promises
  etc..........

MS decided to rewrite Typed Javascript project based "ECMA 6 Standards".

MS Started redesigning the whole project, target ecma 6 as base language.

{ES 6 + Static Typing + added new extra fetures} => The brith of Typescript.


Arch of TS:

					
				      TS language
					    |
					  ES 6
					    |
					  ES 5


Typescript----compile----Plain javascript

Typescript is strongly typed, object oriented  javascript.

Now you can use type script to build better object oriented systems using javascript.

TS is not compititor or replacer for javascript but it complements js.

/////////////////////////////////////////////////////////////////////////////////////////

Type script is a typed superset of javascript that compiles to plain javascript

                  any browser,any host, any os, any device

///////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////


Typescript features

1.variable,datatypes
2.classes
3.interfaces
4.encapsulation
5.inheritance
6.composition and dependency injection
7.modularity
8.meta programming using decorators(annotations)
..............................................................................................
				Setup Ts project

Lab:

Create Ts Project.
How to write ts programs
How to compile ts programs
How to run compiled ts programs

How to save file Name?

fileName.ts
 index.ts

E:\session\upgrad> mkdir ts-apps

2.go to ts-apps folder


E:\session\upgrad>cd ts-apps

E:\session\upgrad\ts-apps>

3.create package.json file


E:\session\upgrad\ts-apps> npm init -y

4.create src folder 

E:\session\upgrad\ts-apps>  mkdir src 

5.install typescript compiler

 npm install typescript --save-dev

6.lanuch ide 
E:\session\upgrad\ts-apps>  code .

7.open package.json file and look inside scripts section and add this entry
 "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "compile" : "tsc"
  }

9.tsconfig.json file  : used to configure compiler parameters
{
    "compilerOptions": {
        "outDir": "build",
        "watch": true,
        "target": "ES6",
        "noEmitOnError": true
    },
    "exclude": [
        "node_modules"
    ],
    "files": [
        "src/index.ts"
    ]
}


10.test inside browser

Create html file inside project dir

ts-apps

 -index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Typescript-App</title>
</head>
<body>
    <h1>Typescript app</h1>
    <script src="src/index.ts"></script>
</body>
</html>

Here we need to test whether it is working or not

in order to test this , you need to install live server. which is embeded webserver for vs code.

11.compile ts code 

open cmd prompt and go to the project location

E:\session\IBM\2022\may\ng-session\ts-apps> npm run compile

12.After compilation, you can see the folder in side project dir and file called index.js

13. include that index.js inside index.html
<body>
    <h1>Typescript app</h1>
    <script src="build/index.js"></script>
</body>
..............................................................................................

How to clone repo? and how to use?

git clone https://github.com/GreenwaysTechnology/NG-IBM-May-22

go to project location

npm install
..............................................................................................					 Typescript language fundamentals
............................................................................................

How to declare variables and how to use data types?

Java script is dynamic and weakly typed language, data types are not necessary during declaration

eg:
  var i =10 
ES 6 keywords
  let j=10;
  const pi=3.14

index.js
  let j=10;
  j="hello".

In ES6 APPS  let and const are recommended.

ES 6 core concepts:

Variable delcaration;

var - es 5
let  - es6 
const - es6

var is not block scoped and let and const is block scoped.

In ES6 APPS  let and const are recommended.

The problems with ES 6:

When es6 was introduced, the node and browsers vendors were not ready to accept
es6 keywords

let ,const never work in older node and browsers.

that time browers were supported only ES 5 version of js.

browsers were not ready that time, but develoers felt,and supported lot on es6.

Then how to run es 6 code on browsers which dont support.

The birth of "Transpilers"  : a special compilers which converts es6 to es5,

developer write code in es6 ---->transpiler-->es 5

Type script code is written based on ES 6 code only.

eg: babel.js 
 higher version -to lower version

eg : tsc
 es6 to es5
 +
 type verification

         "ts compiler by default converts es6 code into es5."

let---------var

{
    "compilerOptions": {
        "outDir": "build",
        "watch": true,
        "target" :"ES6"
    },
    "exclude": [
        "node_modules"
    ],
    "files": [
        "src/index.ts"
    ]
}
............................................................................................
				  Type System

JS has no compile time data types,thats where TS was created in order to add compile time data types.

if any vilation happens during compile time , compiler picks ups the errors and show those errors during dev cycle.

1.Dynamic types
   Runtime Types
2.Static types
   Compile Time Types

Javascript is Dynamic typed language,Types are identified during runtime only.

Types are identified based on "literals" in javascript.

Literals:

1.number
2.string
3.boolean
4.undefined
5.NaN
6.infinity
7.null
8.function
9.object

How to know the type of(runtime type of variable) ?

"type of" operator

Js types:
1.number
   number,NaN,infinity
2.string
3.undefined
4.function
5.object
   object,null
6.boolean

//js types
//strings : "" or '',``(back tick)
let firstName = "Subramanian"
let lastName = 'Murugan'
//show
let fullName = firstName + lastName // concation
//concatnation
console.log("Your Name " + fullName) // + for string concatnation
console.log("Your Name ", fullName)
//using back tick : string inter polation.
fullName = `${firstName} ${lastName}`
console.log(`Your Name ${fullName}`)

//use case of `` and string interpolation: multi strings

//traditional model
let style = "background { color: red }" +
    "container { width : 100 }" +
    "panel {width : 1000}"

let width = 1000
let newStyle = `
     background { color: red }
     container { width : ${width} }
     panel {width : ${width} }
    `
console.log(newStyle)
//numbers : number type and its size is 64 bit -double
let qty = 100
let price = 900
let totalPrice = qty * price
console.log(`Total Price ${totalPrice}`)

//booleans : true or false
let isActive = true;
console.log(`IsActive ${isActive}`)

//undefined : variable is declared but no valid value(literal) is assigned

let a; // undefined

console.log(`a ${a}`)

//NaN -  Not a Number :Error Code : Runtime error, due to numerical computation failers
//Use case -1 : if you do compuation against undefined values

let i; //undefined
let j = 100 //100 value
let r = i * j // undefined * value => NaN
console.log(`Result ${r}`)

//Use case 2: during type conversion - string to number conversion.

let x = "100" //here value is 100 but type is string
let y = 100
//Type conversion:implicit type conversion
let z = x * y  // here js converts string into number automatically: implicit type conversion
console.log(`The Result is ${z}`)
//Type conversion:Explicit type conversion using parseMethods
z = parseFloat(x) * y  // here js converts string into number automatically: implicit type conversion
console.log(`The Result is ${z}`)

//Type conversion:Explicit type conversion using unary + operator
z = +x * y  // here js converts string into number automatically: implicit type conversion
console.log(`The Result is ${z}`)

//Type conversion:Explicit type conversion using Number function
z = Number(x) * y  // here js converts string into number automatically: implicit type conversion
console.log(`The Result is ${z}`)

//Type conversion and NaN
let p = "$1000"
// let t = p *100 //here type conversion fails so that we get error
// let t = parseFloat(p) *100 //here type conversion fails so that we get error
// let t = +(p) *100 //here type conversion fails so that we get error
let t = Number(p) * 100 //here type conversion fails so that we get error

console.log(`The Result is ${t}`)

//infinity
let cost = 100;
let avg = cost / 0
console.log(`Average Cost ${avg}`) //Infinity
..............................................................................................
				 Static Datatypes from Typescript

TS has created strong data types based on the dynmaic types provided by js
(strings,numbers(NaN,infinity),boolean,undefined,object(null),functions)

TS offers data types into major classification
1.prmitive data types
2.Reference data types























